!function(){"use strict";class e{constructor(e,t,r,s,i){this._name=e.name,this._link=e.link,this._cardId=e._id,this._cardSelector=t,this._handlePreviewImage=r,this._prepareDelete=s,this._api=i}_setEventListeners(){this._deleteButton.addEventListener("click",(()=>{this._prepareDelete(this)})),this._likeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardImage.addEventListener("click",(()=>{this._handlePreviewImage(this._cardElement)}))}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_toggleLikeIcon(){this._likeButton.classList.toggle("card__like-button_active")}handleDeleteCard(){this._cardElement.remove()}_handleLikeIcon(){this._likeButton.classList.contains("card__like-button_active")?this._api.deleteLikeApi(this._cardId).then((()=>{this._toggleLikeIcon()})).catch((e=>Promise.reject(`${e}`))):this._api.addLikeApi(this._cardId).then((()=>{this._toggleLikeIcon()})).catch((e=>Promise.reject(`${e}`)))}generateCard(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardElement.querySelector(".card__image").src=this._link,this._cardElement.querySelector(".card__text").textContent=this._name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t,this._inputList=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitBtn=this._formEl.querySelector(this._submitButtonSelector)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_toggleButtonState(){this._hasValidInput(this._inputList)?this._enableButton():this._disableButton()}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_enableButton(){this._hasValidInput([...this._inputList])&&(this._submitBtn.classList.remove(this._inactiveButtonClass),this._submitBtn.disabled=!1)}_disableButton(){this._submitBtn.classList.add(this._inactiveButtonClass),this._submitBtn.disabled=!0}_showInputError(e){this._errorEl=this._formEl.querySelector(`#${e.id}Error`),this._errorEl.textContent=e.validationMessage,this._errorEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._formEl.querySelector(`#${e.id}Error`),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_hasValidInput(){return this._inputList.every((e=>e.validity.valid))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}handleResetValidation(e){this._disableButton(),this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)})),!0===e&&this._formEl.reset()}}class r{constructor(e,t){let{items:r,renderer:s}=e;this._initialArray=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(){this._initialArray.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class s{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}setEventListeners(){this._popup.addEventListener("click",(e=>{(e.target.classList.contains("modal__close")||e.target.classList.contains("modal_opened"))&&this.close()}))}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}}class i extends s{constructor(e){let{popupSelector:t,handleFormSubmit:r}=e;super(t),this._handleFormSubmit=r,this._submitBtn=this._popup.querySelector(".modal__form").querySelector(".modal__submit")}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues(),this.instance,this.id),this._popup.querySelector(".modal__form").reset()})),super.setEventListeners()}open(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.instance=e,this.id=t,super.open()}renderLoading(e){this._submitBtn.textContent=e?"Saving...":"Save"}_getInputValues(){return this._inputList=this._popup.querySelectorAll(".modal__input"),this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}}const n=document.forms.avatarEditForm,a=document.forms.profileEditForm,o=document.forms.cardEditForm,l=(document.forms.cardDeleteForm,document.querySelector("#profile-image-edit-button")),c=document.querySelector("#profile-edit-button"),d=document.querySelector("#card-edit-button"),h=(document.querySelectorAll("#card-delete-button"),{nameInput:a.querySelector("#nameInput"),aboutInput:a.querySelector("#aboutInput"),avatarInput:n.querySelector("#avatarInput"),curAvatar:document.querySelector(".profile__image-pic"),curName:document.querySelector(".profile__title"),curAbout:document.querySelector(".profile__about")}),u={};let _,m,p,b;const E=e=>{const t=document.querySelector(".modal_opened").id,r={profileModal:()=>{let t={newName:e.nameInput,newAbout:e.aboutInput};return g.editUserApi(t.newName,t.newAbout).then((e=>p=e)).catch((e=>Promise.reject(`broken call from index57: ${e}`)))},avatarModal:()=>{let t={newAvatar:e.avatarInput};return g.editAvatarApi(t.newAvatar).then((e=>b=e)).catch((e=>Promise.reject(`broken call from index70: ${e}`)))}}[t];if(!r)throw new Error(`No handler defined for modal type: ${t}`);return r()},v=t=>{const r=new e(t,"#card-instance-template",I,q,g).generateCard();return _.addItem(r),r},g=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e,t){return e.ok?e.json():e.json().then((e=>"POST"===t?(console.error("Full error response:",e),Promise.reject(`Error: ${e.message}`)):"PATCH"===t?(console.error("Full error response:",e),Promise.reject(`Error: ${e.errors[Object.keys(e.errors)[0]].message}`)):(console.error("Full error response:",e),Promise.reject(`Error: ${e}`))))}apiPromiseAll(){return Promise.all([this.getUserApi(),this.getInitialCards()]).then((e=>e)).catch((e=>{console.error(e),alert("Sorry, something went wrong.")}))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>this._checkResponse(e,"GET")))}getUserApi(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>this._checkResponse(e,"GET")))}editUserApi(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>this._checkResponse(e,"PATCH")))}editAvatarApi(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>this._checkResponse(e,"PATCH")))}addCardApi(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>this._checkResponse(e,"POST")))}deleteCardApi(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e,"DELETE")))}addLikeApi(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>this._checkResponse(e,"PUT")))}deleteLikeApi(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e,"DELETE")))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"e315e92f-7d1b-43f2-b057-cdca1769e40c","Content-Type":"application/json"}}),S=new class{constructor(e){this._userObj=e,this._profileId=null}_getCurrentUser(){return{name:this._userObj.curName.textContent,about:this._userObj.curAbout.textContent,avatar:this._userObj.curAvatar.src}}setCurrentUser(e){let t=e.avatar||e.avatarInput,r=e.name||e.nameInput,s=e.about||e.aboutInput,i=e._id;return t&&(this._userObj.curAvatar.src=t),r&&(this._userObj.curName.textContent=r),s&&(this._userObj.curAbout.textContent=s),i&&(this._profileId=i),{avatar:t,name:r,about:s,_id:i}}fillUserForm(){const e=this._getCurrentUser();this._userObj.nameInput.value=`${e.name}`,this._userObj.aboutInput.value=`${e.about}`}}(h);var L;g.apiPromiseAll().then((e=>{let[t,r]=e;return{initialUser:t,initialCards:r}})).then((e=>{const t=S.setCurrentUser(e.initialUser)._id;return m=e.initialUser,S.setCurrentUser(m),_=new r({items:e.initialCards,renderer:v},"#card-section-wrapper"),_.renderItems(),t})).catch((e=>{console.error(e),alert(`Server error: ${e}, please try again.`)})),L={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit",inactiveButtonClass:"modal__submit_inactive",inputErrorClass:"modal__error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(L.formSelector)).forEach((e=>{const r=new t(L,e),s=e.getAttribute("name");u[s]=r,r.enableValidation()})),u[a.getAttribute("name")].enableValidation(),u[o.getAttribute("name")].enableValidation(),u[n.getAttribute("name")].enableValidation();const f=new class extends s{constructor(e){super(e),this._previewImage=this._popup.querySelector(".modal__image"),this._previewText=this._popup.querySelector(".modal__text")}open(e){let{name:t,link:r}=e;this._previewImage.src=r,this._previewImage.alt=t,this._previewText.textContent=t,super.open()}}("#cardDisplayModal"),y=new i({popupSelector:"#avatarModal",handleFormSubmit:e=>{y.renderLoading(!0),E(e).then((e=>{S.setCurrentUser(e),u[n.getAttribute("name")].handleResetValidation(!0),y.close(),y.renderLoading(!1)})).catch((e=>(console.error(e),y.renderLoading(!1),Promise.reject(`${e}`))))}}),C=new i({popupSelector:"#profileModal",handleFormSubmit:e=>{C.renderLoading(!0),E(e).then((e=>{S.setCurrentUser(e),u[a.getAttribute("name")].handleResetValidation(!0),C.close(),C.renderLoading(!1)})).catch((e=>{console.error(e),C.renderLoading(!1),alert(`${e}`)}))}}),k=new i({popupSelector:"#cardAddModal",handleFormSubmit:e=>{k.renderLoading(!0),g.addCardApi(e.cardTitle,e.imageUrl).then((e=>{v({name:e.name,link:e.link}),u[o.getAttribute("name")].handleResetValidation(!0),k.close(),k.renderLoading(!1)})).catch((e=>{console.error(e),k.renderLoading(!1),alert(`${e}`)}))}}),A=new i({popupSelector:"#cardDeleteModal",handleFormSubmit:(e,t,r)=>{g.deleteCardApi(r).then((()=>{t.handleDeleteCard(),A.close()})).catch((e=>{console.error(e),alert(`${e}`)}))}});function I(e){const t=e.querySelector(".card__text").textContent,r=e.querySelector(".card__image").src;f.open({name:t,link:r})}function q(e){const t=e._cardId;A.open(e,t)}f.setEventListeners(),C.setEventListeners(),y.setEventListeners(),k.setEventListeners(),A.setEventListeners(),l.addEventListener("click",(()=>{u[n.getAttribute("name")].handleResetValidation(!0),y.open()})),c.addEventListener("click",(()=>{S.fillUserForm(),u[a.getAttribute("name")].handleResetValidation(!1),C.open()})),d.addEventListener("click",(()=>{k.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,